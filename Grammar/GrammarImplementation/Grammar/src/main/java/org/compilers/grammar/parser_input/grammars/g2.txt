pureBooleanExpression;intermediaryPureBooleanExpression;intermediaryType;intermediaryIfStatement;intermediaryBooleanTerm;intermediaryArithmeticExpression;intermediaryBooleanExpression;intermediarySimpleStatement;intermediaryTerm;program;newlineSeparator;mixedStatement;factor;term;negation;booleanOperator;relationalOperator;booleanTerm;booleanConstant;expression;booleanExpression;arithmeticExpression;arrayAccessExpression;readArgument;writeArgument;ioStatement;type;primitiveType;declarationStatement;assignment;assignmentStatement;ifStatement;whileStatement;forStatement;controlFlowStatement;simpleStatement;simpleStatementRepetition;simpleStatementSequence;mixedStatementRepetition;compoundStatement;mixedStatement;statement
identifier;constant;endif;\n;(;);*;/;%;+;-;!;&&;||;<;<=;==;>;>=;!=;read;write;[;];val;:;=;if;else;while;for;to;{;};Integer;Character;Boolean;String
program->statement;newlineSeparator->\n;factor->identifier;factor->constant;factor->(`arithmeticExpression`);factor->arrayAccessExpression;term->factor`intermediaryTerm;intermediaryTerm->*`term;intermediaryTerm->/`term;intermediaryTerm->%`term;arithmeticExpression->term`intermediaryArithmeticExpression;intermediaryArithmeticExpression->;intermediaryArithmeticExpression->+`arithmeticExpression;intermediaryArithmeticExpression->-`arithmeticExpression;negation->!;booleanOperator->&&;booleanOperator->||;booleanTerm->identifier;booleanTerm->booleanConstant;booleanTerm->negation`intermediaryBooleanTerm;intermediaryBooleanTerm->identifier;intermediaryBooleanTerm->booleanConstant;relationalOperator-><;relationalOperator-><=;relationalOperator->==;relationalOperator->>;relationalOperator->>=;relationalOperator->!=;booleanExpression->booleanTerm`intermediaryBooleanExpression;booleanExpression->arithmeticExpression`relationalOperator`arithmeticExpression;intermediaryBooleanExpression->;intermediaryBooleanExpression->booleanOperator`booleanExpression;pureBooleanExpression->booleanTerm`intermediaryPureBooleanExpression;intermediaryPureBooleanExpression->booleanOperator`pureBooleanExpression;expression->arithmeticExpression;expression->pureBooleanExpression;expression->arrayAccessExpression;readArgument->identifier`intermediaryType;writeArgument->expression;ioStatement->read`(`readArgument`);ioStatement->write`(`writeArgument`);primitiveType->Integer;primitiveType->Character;primitiveType->String;primitiveType->Boolean;type->primitiveType`intermediaryType;intermediaryType->;intermediaryType->[`arithmeticExpression`];declarationStatement->val`identifier`:`type;arrayAccessExpression->identifier`[`arithmeticExpression`];assignment->=`expression;assignmentStatement->identifier`assignment;ifStatement->if`(`booleanExpression`)`compoundStatement`intermediaryIfStatement`endif;intermediaryIfStatement->else`compoundStatement;intermediaryIfStatement->;whileStatement->while`(`booleanExpression`)`compoundStatement;forStatement->for`(`expression`to`expression`)`compoundStatement;controlFlowStatement->ifStatement;controlFlowStatement->whileStatement;controlFlowStatement->forStatement;simpleStatement->declarationStatement;simpleStatement->assignmentStatement;simpleStatement->controlFlowStatement;simpleStatement->ioStatement;simpleStatementRepetition->newlineSeparator`simpleStatement`simpleStatementRepetition;simpleStatementRepetition->;simpleStatementSequence->simpleStatement`simpleStatementRepetition;mixedStatementRepetition->newlineSeparator`mixedStatement`mixedStatementRepetition;mixedStatementRepetition->;compoundStatement->{`mixedStatement`mixedStatementRepetition`};mixedStatement->simpleStatement;mixedStatement->compoundStatement;statement->mixedStatement;
program

